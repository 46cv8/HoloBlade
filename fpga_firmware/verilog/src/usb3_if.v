// File: usb3_if.v
// Generated by MyHDL 0.11
// Date: Tue Sep  8 11:53:25 2020


`timescale 1ns/10ps

module usb3_if (
    fpga_clk,
    reset_per_frame,
    buffer_switch_done,
    ftdi_clk,
    FR_RXF,
    FT_OE,
    FT_RD,
    usb3_data_in,
    write_to_dc32_fifo,
    dc32_fifo_data_in,
    dc32_fifo_almost_full,
    dc32_fifo_empty
);
// Ports
// I/O pins:
// --------
// Control:
// fpga_clk                  : Need to feed in the main FPGA clock as reset_per_frame and buffer_switch_done are both on the main clock
// reset_per_frame           : Reset line which allows us to reset state after each buffer switch
// buffer_switch_done        : Line to tell the object that a buffer switch has occured
// USB-Fifo Side:  
// ftdi_clk                  : 66MHz input clock from USB Chip to synchronise with reading from FT601 32-bit FIFOs
// FR_RXF                    : RXF_N tells us if data is available on the USB3 Chip and is an input
// FT_OE                     : OE_N is an active low output signal to tell the USB3 Chip that the FPGA is the bus master while asserted
// FT_RD                     : RD_N is an active low output signal to tell that USB3 Chip that data is being read (ie: it is the RD signal for the USB3 FIFO)
// usb3_data_in              : 32-bit wide Data lines from the FT601
// FIFO-side:
// write_to_dc32_fifo        : Signal to write to the interfacing FIFO
// dc32_fifo_data_in         : Data which shall go into 32-bit 
// dc32_fifo_almost_full     : Goes high when therea are 40 items in FIFO and then clears at 1
// dc32_fifo_empty           : Goes high when the FIFO is empty

input fpga_clk;
input reset_per_frame;
input buffer_switch_done;
input ftdi_clk;
input FR_RXF;
output FT_OE;
reg FT_OE;
output FT_RD;
reg FT_RD;
input [31:0] usb3_data_in;
output write_to_dc32_fifo;
reg write_to_dc32_fifo;
output [31:0] dc32_fifo_data_in;
reg [31:0] dc32_fifo_data_in;
input dc32_fifo_almost_full;
input dc32_fifo_empty;

reg dc32_fifo_empty_latched;
reg reset_per_frame_latched;
reg [5:0] num_words_curr_line;
reg [3:0] state;
reg buffer_switch_done_latched;
reg [10:0] num_lines_clocked_out;
reg [4:0] state_timeout_counter;
reg write_to_dc32_fifo_latched;
reg [31:0] dc32_fifo_data_in_latched;



always @(posedge fpga_clk) begin: USB3_IF_LATCH_FROM_FPGA_CLOCK
    buffer_switch_done_latched <= 1'b0;
    reset_per_frame_latched <= 1'b0;
    dc32_fifo_empty_latched <= 1'b0;
    if ((buffer_switch_done == 1'b1)) begin
        buffer_switch_done_latched <= 1'b1;
    end
    if ((reset_per_frame == 1'b1)) begin
        reset_per_frame_latched <= 1'b1;
    end
    if ((dc32_fifo_empty == 1'b1)) begin
        dc32_fifo_empty_latched <= 1'b1;
    end
end


always @(posedge ftdi_clk) begin: USB3_IF_USB3_READOUT_LOGIC_STATE
    FT_OE <= 1'b1;
    FT_RD <= 1'b1;
    dc32_fifo_data_in_latched <= 0;
    write_to_dc32_fifo_latched <= 1'b0;
    if ((reset_per_frame_latched == 1'b1)) begin
        state <= 4'b0000;
        num_words_curr_line <= 40;
        num_lines_clocked_out <= 16;
    end
    else begin
        case (state)
            4'b0000: begin
                if (((buffer_switch_done_latched == 1'b1) && (dc32_fifo_empty_latched == 1'b1))) begin
                    if ((FR_RXF == 1'b0)) begin
                        state <= 4'b0001;
                        state_timeout_counter <= 4;
                    end
                    else begin
                        state <= 4'b0000;
                    end
                end
            end
            4'b0001: begin
                state_timeout_counter <= (state_timeout_counter - 1);
                if ((state_timeout_counter == 1)) begin
                    if (((FR_RXF == 1'b0) && (dc32_fifo_almost_full == 1'b0))) begin
                        state <= 4'b0011;
                    end
                    else begin
                        state_timeout_counter <= 4;
                    end
                end
            end
            4'b0011: begin
                FT_OE <= 1'b0;
                state <= 4'b0100;
                num_words_curr_line <= 40;
            end
            4'b0100: begin
                FT_OE <= 1'b0;
                FT_RD <= 1'b0;
                dc32_fifo_data_in_latched <= usb3_data_in;
                num_words_curr_line <= (num_words_curr_line - 1);
                state <= 4'b0101;
            end
            4'b0101: begin
                if ((dc32_fifo_almost_full == 1'b1)) begin
                    dc32_fifo_data_in_latched <= usb3_data_in;
                    state <= 4'b0010;
                    state_timeout_counter <= 4;
                end
                else if ((num_words_curr_line == 0)) begin
                    dc32_fifo_data_in_latched <= usb3_data_in;
                    state <= 4'b0010;
                    state_timeout_counter <= 4;
                end
                else if ((FR_RXF == 1'b1)) begin
                    dc32_fifo_data_in_latched <= usb3_data_in;
                    write_to_dc32_fifo_latched <= 1'b1;
                    num_words_curr_line <= (num_words_curr_line - 1);
                    state <= 4'b0110;
                    state_timeout_counter <= 4;
                end
                else begin
                    FT_OE <= 1'b0;
                    FT_RD <= 1'b0;
                    dc32_fifo_data_in_latched <= usb3_data_in;
                    write_to_dc32_fifo_latched <= 1'b1;
                    num_words_curr_line <= (num_words_curr_line - 1);
                end
            end
            4'b0010: begin
                state_timeout_counter <= (state_timeout_counter - 1);
                dc32_fifo_data_in_latched <= dc32_fifo_data_in_latched;
                if ((state_timeout_counter == 1)) begin
                    if (((num_words_curr_line > 0) && (dc32_fifo_almost_full == 1'b0))) begin
                        FT_OE <= 1'b0;
                        FT_RD <= 1'b0;
                        write_to_dc32_fifo_latched <= 1'b1;
                        num_words_curr_line <= (num_words_curr_line - 1);
                        state <= 4'b0101;
                    end
                    else if ((num_words_curr_line == 0)) begin
                        write_to_dc32_fifo_latched <= 1'b1;
                        num_words_curr_line <= 40;
                        num_lines_clocked_out <= (num_lines_clocked_out - 1);
                        if ((num_lines_clocked_out == 1)) begin
                            state <= 4'b0000;
                            state_timeout_counter <= 3;
                        end
                        else begin
                            state <= 4'b0001;
                            state_timeout_counter <= 31;
                        end
                    end
                    else begin
                        state_timeout_counter <= 4;
                    end
                end
            end
            4'b0110: begin
                state_timeout_counter <= (state_timeout_counter - 1);
                if ((state_timeout_counter == 1)) begin
                    if (((FR_RXF == 1'b0) && (dc32_fifo_almost_full == 1'b0))) begin
                        state <= 4'b0111;
                    end
                    else begin
                        state_timeout_counter <= 4;
                    end
                end
            end
            4'b0111: begin
                FT_OE <= 1'b0;
                state <= 4'b1000;
            end
            4'b1000: begin
                FT_OE <= 1'b0;
                FT_RD <= 1'b0;
                dc32_fifo_data_in_latched <= usb3_data_in;
                write_to_dc32_fifo_latched <= 1'b1;
                num_words_curr_line <= (num_words_curr_line - 1);
                state <= 4'b0101;
            end
        endcase
    end
end


always @(negedge ftdi_clk) begin: USB3_IF_PRE_CLOCK_DC32_OUTPUTS
    dc32_fifo_data_in <= dc32_fifo_data_in_latched;
    write_to_dc32_fifo <= write_to_dc32_fifo_latched;
end

endmodule
